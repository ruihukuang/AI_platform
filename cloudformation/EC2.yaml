AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Windows Server with VPC

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

  MySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, HTTPS, and RDP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allows SSH from anywhere (consider restricting this for security)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allows HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 # Allows HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0 # Allows RDP from anywhere (consider restricting this for security)

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m7i-flex.large
      ImageId: ami-0d92a37881009d7a9
      KeyName: AI_course # Replace with your key pair name
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref MySubnet
          GroupSet:
            - !Ref MySecurityGroup
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Set execution policy and install uv
          Set-ExecutionPolicy Bypass -Scope Process -Force
          irm https://astral.sh/uv/0.8.3/install.ps1 | iex

          # Add directories to PATH
          $currentPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          $newPath = "$currentPath; C:\Users\Administrator\.local\bin; C:\Program Files\Git\bin"
          [Environment]::SetEnvironmentVariable("Path", $newPath, "Machine")

          # Navigate to Administrator's directory
          Set-Location -Path C:\Users\Administrator

          # Install Git using winget in C:\Users\Administrator
          Start-Process winget -ArgumentList 'install --id Git.Git -e --source winget' -Wait -WorkingDirectory 'C:\Users\Administrator'

          # Update PATH for Git
          $gitPath = "C:\Program Files\Git\bin"
          [Environment]::SetEnvironmentVariable("Path", $env:Path + ";$gitPath", [EnvironmentVariableTarget]::Machine)

          # Simulate closing and reopening PowerShell by starting a new process in C:\Users\Administrator
          Start-Process powershell -ArgumentList '-NoExit', '-Command', 'git --version; git clone https://github.com/ed-donner/agents.git; cd agents; ls; uv.exe sync' -Wait -WorkingDirectory 'C:\Users\Administrator'

          # Check for errors
          if ($?) {
            Write-Host "All installations, cloning, and sync completed successfully."
          } else {
            Write-Host "There were errors during installation, cloning, or sync."
          }
          </powershell>
