name: Download PsExec

on:
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read

jobs:
  setup-PsExec:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
        aws-region: ${{ secrets.REGION }}

    - name: Retrieve the Output for instance ID
      run: |
        INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name WindowHostStack --query "Stacks[0].Outputs[?OutputKey=='MyInstanceId'].OutputValue" --output text)
        echo "INSTANCE_ID is $INSTANCE_ID"
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Check and Update/Create SSM Document
      run: |
        DOCUMENT_CONTENT='{
          "schemaVersion": "2.2",
          "description": "Download and extract PsExec.exe",
          "mainSteps": [
            {
              "action": "aws:runPowerShellScript",
              "name": "downloadAndExtractPsExec",
              "inputs": {
                "runCommand": [
                  "$zipUrl=\"https://download.sysinternals.com/files/PSTools.zip\"",
                  "$zipPath=\"C:\\Windows\\system32\\config\\systemprofile\\.local\\bin\\PSTools.zip\"",
                  "$extractPath=\"C:\\Windows\\system32\\config\\systemprofile\\.local\\bin\\Extract\"",
                  "Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath",
                  "Expand-Archive -Path $zipPath -DestinationPath $extractPath",
                  "Remove-Item -Path $zipPath"
                ]
              }
            }
          ]
        }'

        CURRENT_CONTENT=$(aws ssm get-document --name "DownloadPsExec" --query "Content" --output text)

        if [ "$DOCUMENT_CONTENT" != "$CURRENT_CONTENT" ]; then
          aws ssm update-document \
            --name "DownloadPsExec" \
            --document-version "\$LATEST" \
            --content "$DOCUMENT_CONTENT"
        else
          echo "Document content is already up-to-date."
        fi

    - name: Run SSM Command
      run: |
        aws ssm send-command \
          --document-name "DownloadPsExec" \
          --document-version "2" \
          --targets "Key=instanceids,Values=${{ env.INSTANCE_ID }}" \
          --comment "Running DownloadPsExec document" \
          --timeout-seconds 600
